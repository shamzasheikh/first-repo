<<<<<<< HEAD
=======
- name: Download and Install the worker Binaries
  get_url:
    url: "{{ item }}"
  with_items:
  - "{{ kubectl_url }}"
  - "{{ kube_proxy_url }}"
  - "{{ kubelet_url }}"

>>>>>>> 33ee2ddefdafe0579811146bf155c6f5a8814241
- name: Create the installation directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    recurse: yes
  with_items:
  - /etc/cni/net.d
  - /opt/cni/bin
  - /var/lib/kubelet
  - /var/lib/kube-proxy
  - /var/lib/kubernetes
  - /var/run/kubernetes

<<<<<<< HEAD
- name: Copy / Install the Worker binaries
  copy:
    src: "{{ item }}"
    dest: /usr/local/bin/
    owner: "root"
    group: "root"
    mode: 0755
  with_items:
  - "{{ allcerts_dir }}/kubectl"
  - "{{ allcerts_dir }}/kube-proxy"
  - "{{ allcerts_dir }}/kubelet"


- name: Move the CA certificate
  copy:
    src: "{{ item }}"
    dest: /var/lib/kubernetes/
    mode: '0644'
  with_items:
  - "{{ allcerts_dir }}/ca.crt"

- name: Copy all files to /tmp
  template:
    src: "{{ item }}"
    dest: /tmp/{{ item | basename | regex_replace('\.j2$', '') }}
  with_items:
    - bootstrap-token-07401b.yaml.j2
    - csrs-for-bootstrapping.yaml.j2
    - auto-approve-csrs-for-group.yaml.j2
    - auto-approve-renewals-for-nodes.yaml.j2

- name: Create the Boostrap Token to be used by Nodes(Kubelets) to invoke Certificate API
  command: kubectl apply -f /tmp/bootstrap-token-07401b.yaml
=======
- name: Install the worker Binaries
  shell: chmod +x kubectl kube-proxy kubelet && mv kubectl kube-proxy kubelet /usr/local/bin/

- name: Move the ca certificate
  command: mv ca.crt /var/lib/kubernetes/

- name: Copy all files to template
  template:
    src: "{{ item }}"
    dest: "{{ kube_configs }}"
  with_fileglob:
    - ../templates/*.j2

- name: Create the Boostrap Token to be used by Nodes(Kubelets) to invoke Certificate API
  community.kubernetes.k8s:
    state: present
    src: bootstrap-token-07401b.yaml
>>>>>>> 33ee2ddefdafe0579811146bf155c6f5a8814241
  register: bootstrap_token


- name: Authorize workers(kubelets) to create/approve CSR and Auto Renew Certificates
<<<<<<< HEAD
  command: kubectl apply -f  "/tmp/{{ item }}"
  with_items:
   - csrs-for-bootstrapping.yaml
   - auto-approve-csrs-for-group.yaml
   - auto-approve-renewals-for-nodes.yaml

- name: Copy systemd unit file
  template:
    src: "{{ item }}"
    dest: /var/lib/kubelet/{{ item | basename | regex_replace('\.j2$', '') }}
  with_items:
    - bootstrap-kubeconfig.j2
    - kubelet-config.yaml.j2

- name: Configure Kubelet Service
  template: 
    src: "kubelet.service.j2"
    dest: /etc/systemd/system/{{ item | basename | regex_replace('\.j2$', '') }}
  with_fileglob:
  - kubelet.service.j2
  - kube-proxy.service.j2

- name: Crete  Kubernetes Proxy config
  template:
    src: kube-proxy-config.yaml.j2
    dest: /var/lib/kube-proxy/kube-proxy-config.yaml

- name: Start the Worker Services
  systemd:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
  - kubelet
  - kube-proxy


=======
  community.kubernetes.k8s:
    state: present
    src: "{{ item }}"
  with_items:
  - csrs-for-bootstrapping.yaml
  - auto-approve-csrs-for-group.yaml
  - auto-approve-renewals-for-nodes.yaml

- name: Configure Kubelet to TLS Bootstrap
  copy:
    src: bootstrap-kubeconfig.j2
    dest: /var/lib/kubelet/bootstrap-kubeconfig
  
- name: Create Kubelet Config File
  copy:
    src: kubelet-config.yaml.j2
    dest: /var/lib/kubelet/kubelet-config.yaml


- name: Configure Kubelet Service
  copy: 
    src: kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service

- name: Crete  Kubernetes Proxy config
  copy:
    src: kube-proxy-config.yaml.j2
    dest: /var/lib/kube-proxy/kube-proxy-config.yaml

- name: Configure the Kubernetes Proxy
  template:
    src: kube-proxy.service.j2
    dest: /etc/systemd/system/kube-proxy.service


- name: Start the Worker Services
  systemd: 
    name: "{{ item }}"
    state: started
    enabled: yes
  with_item:
  - kubelet
  - kube-proxy

>>>>>>> 33ee2ddefdafe0579811146bf155c6f5a8814241
- name: Get Server CSR
  command: kubectl get csr
  register: csr_name

- name: Approve Server CSR
<<<<<<< HEAD
  command: kubectl certificate approve {{ csr_name.stdout }}
=======
  command: kubectl certificate approve {{ csr_name }}





>>>>>>> 33ee2ddefdafe0579811146bf155c6f5a8814241

